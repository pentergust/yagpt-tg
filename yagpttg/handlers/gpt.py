"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GPT.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â–∞—Ç—å—Å—è —Å YandexGPT.
"""

from aiogram import Bot, Router
from aiogram.enums import ChatAction
from aiogram.types import Message
from loguru import logger

from yagpttg.api import YandexGPT
from yagpttg.db import User

router = Router(name="YandexGPT")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========

@router.message()
async def send_user_gpt_answer(
    message: Message,
    user: User | None,
    bot: Bot,
    yagpt: YandexGPT
) -> None:
    """–ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ YandexGpt.

    –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    if user is None:
        if message.chat.type == "private":
            await message.answer(text=(
                "üçì –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, "
                "—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            ))
        return None

    if message.text is None:
        if message.chat.type == "private":
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
        return None

    prompt = message.text.strip()

    answer = await message.answer("‚è≥ –î—É–º–∞—é...")
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)

    try:
        resp = await yagpt.get_answer(str(message.from_user.id), prompt)
    except Exception as e:
        logger.error("Error while processing GPT request: {}", e)
        await answer.edit_text("üîå –í–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –æ—à–∏–±–∫–∞.")
    else:
        await answer.edit_text(resp)

